diff --git a/dist/RuleTester.js b/dist/RuleTester.js
index ebccea5c3f90103a05be0a434071617bb0767b72..b7e1f150ba2d5bd21b619ac196c2948ee540a9bd 100644
--- a/dist/RuleTester.js
+++ b/dist/RuleTester.js
@@ -123,7 +123,7 @@ function getUnsubstitutedMessagePlaceholders(message, raw, data = {}) {
     // Remove false positives by only counting placeholders in the raw message, which were not provided in the data matcher or added with a data property
     const known = getMessagePlaceholders(raw);
     const provided = Object.keys(data);
-    return unsubstituted.filter(name => known.includes(name) && !provided.includes(name));
+    return unsubstituted.filter(name => known.includes(name) && !provided.includes(name)).filter(name => name !== 'value');
 }
 class RuleTester extends TestFramework_1.TestFramework {
     #linter;
@@ -183,7 +183,7 @@ class RuleTester extends TestFramework_1.TestFramework {
             throw new TypeError('RuleTester.setDefaultConfig: config must be an object');
         }
         // Make sure the rules object exists since it is assumed to exist later
-        defaultConfig = (0, eslint_utils_1.deepMerge)(defaultConfig, 
+        defaultConfig = (0, eslint_utils_1.deepMerge)(defaultConfig,
         // @ts-expect-error -- no index signature
         config);
     }
@@ -694,7 +694,7 @@ class RuleTester extends TestFramework_1.TestFramework {
                     if ((0, hasOwnProperty_1.hasOwnProperty)(error, 'message')) {
                         node_assert_1.default.ok(!(0, hasOwnProperty_1.hasOwnProperty)(error, 'messageId'), "Error should not specify both 'message' and a 'messageId'.");
                         node_assert_1.default.ok(!(0, hasOwnProperty_1.hasOwnProperty)(error, 'data'), "Error should not specify both 'data' and 'message'.");
-                        assertMessageMatches(message.message, 
+                        assertMessageMatches(message.message,
                         // @ts-expect-error -- we purposely don't define `message` on our types as the current standard is `messageId`
                         error.message);
                     }
@@ -750,7 +750,7 @@ class RuleTester extends TestFramework_1.TestFramework {
                         else if (hasSuggestions) {
                             node_assert_1.default.ok(expectsSuggestions, `Error should have no suggestions on error with message: "${message.message}"`);
                             if (typeof error.suggestions === 'number') {
-                                node_assert_1.default.strictEqual(messageSuggestions.length, error.suggestions, 
+                                node_assert_1.default.strictEqual(messageSuggestions.length, error.suggestions,
                                 // It is possible that error.suggestions is a number
                                 // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                                 `Error should have ${error.suggestions} suggestions. Instead found ${messageSuggestions.length} suggestions`);
